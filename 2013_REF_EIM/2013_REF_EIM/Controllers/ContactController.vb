Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Data.Entity
Imports System.Linq
Imports System.Threading.Tasks
Imports System.Net
Imports System.Web
Imports System.Web.Mvc
Imports Reference.EIM.Domain

Namespace _2013_REF_EIM
    Public Class ContactController
        Inherits System.Web.Mvc.Controller

        'Default context that was generated by the scaffolding, replace wtih a constructor with the list of defined dependencies
        'Private db As New genContext

        Private _repository As Reference.EIM.Repository.IContactRepository

        Sub New(repository As Reference.EIM.Repository.IContactRepository)
            If repository Is Nothing Then Throw New ArgumentNullException("repository")
            _repository = repository
        End Sub

        ' GET: /Contact/
        'Async Function Index() As Task(Of ActionResult)
        '     Return View(Await db.Contacts.ToListAsync())
        'end function
        Function Index() As ActionResult
            'when the async controller option is checked it puts async on the controller as well as the repositroy get.
            'this level of async EF is in 6, however oracle doesn't support 6 or async
            Return View(_repository.GetAll(Of Contact)())
        End Function

        ' GET: /Contact/Details/5
        'Async Function Details(ByVal id As Integer?) As Task(Of ActionResult)
        '    If IsNothing(id) Then
        '        Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
        '    End If
        '    Dim contact As Contact = Await db.Contacts.FindAsync(id)
        '    If IsNothing(contact) Then
        '        Return HttpNotFound()
        '    End If
        '    Return View(contact)
        'End Function

        Function Details(ByVal id As Integer?) As ActionResult
            If IsNothing(id) Then Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
            'validate that the parameter passed is valid for the current user
            Dim contact As Contact = _repository.GetByKey(Of Contact)(id)
            If IsNothing(contact) Then Return HttpNotFound()
            Return View(contact)
        End Function

        ' GET: /Contact/Create
        Function Create() As ActionResult
            Return View()
        End Function

        ' POST: /Contact/Create
        'To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        'more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        '<HttpPost()>
        '<ValidateAntiForgeryToken()>
        'Async Function Create(<Bind(Include:="ContactID,FirstName,LastName,Title,AddDate,ModifiedDate")> ByVal contact As Contact) As Task(Of ActionResult)
        '    If ModelState.IsValid Then
        '        db.Contacts.Add(contact)
        '        Await db.SaveChangesAsync()
        '        Return RedirectToAction("Index")
        '    End If
        '    Return View(contact)
        'End Function

        <HttpPost()>
        <ValidateAntiForgeryToken()>
        Function Create(<Bind(Include:="ContactID,FirstName,LastName,Title,AddDate,ModifiedDate")> ByVal contact As Contact) As ActionResult
            If ModelState.IsValid Then
                'validate that the parameter passed is valid for the current user and that the user has permissions for the combination of action and data
                'vaidate that the loaded record has not been modified since the user loaded the data onto the screen.
                _repository.Add(contact)
                _repository.UnitOfWork.SaveChanges()
                'TODO strongly type redirecttoaction, bind(include:=
                Return RedirectToAction("Index")
            End If
            Return View(contact)
        End Function

        ' GET: /Contact/Edit/5
        'Async Function Edit(ByVal id As Integer?) As Task(Of ActionResult)
        '    If IsNothing(id) Then
        '        Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
        '    End If
        '    Dim contact As Contact = Await db.Contacts.FindAsync(id)
        '    If IsNothing(contact) Then
        '        Return HttpNotFound()
        '    End If
        '    Return View(contact)
        'End Function

        Function Edit(ByVal id As Integer?) As ActionResult
            If IsNothing(id) Then Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
            Dim contact As Contact = _repository.GetByKey(Of Contact)(id)
            If IsNothing(contact) Then Return HttpNotFound()
            Return View(contact)
        End Function

        ' POST: /Contact/Edit/5
        'To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        'more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        '<HttpPost()>
        '<ValidateAntiForgeryToken()>
        'Async Function Edit(<Bind(Include:="ContactID,FirstName,LastName,Title,AddDate,ModifiedDate")> ByVal contact As Contact) As Task(Of ActionResult)
        '    If ModelState.IsValid Then
        '        db.Entry(contact).State = EntityState.Modified
        '        Await db.SaveChangesAsync()
        '        Return RedirectToAction("Index")
        '    End If
        '    Return View(contact)
        'End Function

        <HttpPost()>
<ValidateAntiForgeryToken()>
        Function Edit(<Bind(Include:="ContactID,FirstName,LastName,Title,AddDate,ModifiedDate")> ByVal contact As Contact) As ActionResult
            If ModelState.IsValid Then
                'validate that the parameter passed is valid for the current user and that the user has permissions for the combination of action and data
                'vaidate that the loaded record has not been modified since the user loaded the data onto the screen.
                _repository.Update(Of Contact)(contact)
                _repository.UnitOfWork.SaveChanges()
                Return RedirectToAction("Index")
            End If
            Return View(contact)
        End Function

        ' GET: /Contact/Delete/5
        'Async Function Delete(ByVal id As Integer?) As Task(Of ActionResult)
        '    If IsNothing(id) Then
        '        Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
        '    End If
        '    Dim contact As Contact = Await db.Contacts.FindAsync(id)
        '    If IsNothing(contact) Then
        '        Return HttpNotFound()
        '    End If
        '    Return View(contact)
        'End Function

        Function Delete(ByVal id As Integer?) As ActionResult
            If IsNothing(id) Then Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
            Dim contact As Contact = _repository.GetByKey(Of Contact)(id)
            If IsNothing(contact) Then Return HttpNotFound()
            Return View(contact)
        End Function

        ' POST: /Contact/Delete/5
        '<HttpPost()>
        '<ActionName("Delete")>
        '<ValidateAntiForgeryToken()>
        'Async Function DeleteConfirmed(ByVal id As Integer) As Task(Of ActionResult)

        '    Dim contact As Contact = Await db.Contacts.FindAsync(id)
        '    db.Contacts.Remove(contact)
        '    Await db.SaveChangesAsync()
        '    Return RedirectToAction("Index")
        'End Function

        <HttpPost()>
<ActionName("Delete")>
<ValidateAntiForgeryToken()>
        Function DeleteConfirmed(ByVal id As Integer) As ActionResult
            'assume that this would not normally take place and that the specified entity would normally be looked up and various delete flags set.
            'validate that the parameter passed is valid for the current user and that the user has permissions for the combination of action and data
            'vaidate that the loaded record has not been modified since the user loaded the data onto the screen.
            Dim contact As Contact = _repository.GetByKey(Of Contact)(id)
            _repository.Delete(Of Contact)(contact)
            _repository.UnitOfWork.SaveChanges()
            Return RedirectToAction("Index")
        End Function

    End Class
End Namespace
